datagen<-function(seed=sample(1:1000000,size=1),ssize=2000,popsize=15000000,OR_C=3,OR_WI=1,OR_WC=5,OR_H=1.5,em=2,cfV0=F,cfV1=F,return_full=F){
  set.seed(seed)
  #generate data
  C<-rnorm(n=popsize)
  U1<-rbinom(n=popsize,size=1,prob=0.5) #affects both
  U2<-rbinom(n=popsize,size=1,prob=0.5) #affects covid
  
  if(cfV0==T) V=rep(0,popsize); if(cfV1==T) V=rep(1,popsize);
  if(cfV0==F&cfV1==F){
    V<-rbinom(prob=plogis(0.5+0.3*C + C^2 + sin(C)),size=1,n=popsize) #prevalence is around 0.73
  }
  #mean(V)
  #Infection (with something) has some common risk factors U1 and C
  Infec<-rbinom(prob=plogis(0.5*C-5+0.5*U1),size=1,n=popsize) #current prevalence around 0.007
  
  #Infected with COVID
  Infec_COVID<- rbinom(prob=plogis( -log(OR_C)*V -5 + C - C^3 - abs(C)+em*V*C+log(3)*U2*(1.5-V)-2*U1), size=1,n=popsize) #0.0120
  #mean(Infec_COVID)
  #symptoms based on infection
  #can come from either or both infections, if present
  W=rep(0,popsize)
  W[Infec==1]<-rbinom(prob=plogis(-4+0.5*C[Infec==1]-log(OR_WI)*V[Infec==1]-0.5*U1[Infec==1]),size=1, n=sum(Infec==1))
  W[Infec_COVID==1]<-rbinom(prob=plogis(-2+1*C[Infec_COVID==1]-log(OR_WC)*V[Infec_COVID==1]-1*U1[Infec_COVID==1]+0.5*U2[Infec_COVID==1]*(1-V[Infec_COVID==1])),size=1, n=sum(Infec_COVID))
  #mean(W[Infec==1|Infec_COVID==1]) #9%
  #mean(W[Infec_COVID==1]) #27%
  #mean(W[Infec==1]) #2%
  #mean(W[Infec_COVID==1&V==1]) #8%
  
  #hospitalization, only possible if symptoms present
  H=rep(0,popsize)
  H[W==1]<-rbinom(prob=plogis(1.5+0.5*C[W==1]+log(OR_H)*V[W==1]-0.5*U1[W==1]),size=1,n=sum(W==1))
  #mean(H[W==1]) #83% with severe symptoms go to hospital
  #sum(H==1)
  #selection on outcome for testing (does not condition on infectious status, just being in the hospital)
  R<-sample(which(H==1),ssize) #sample randomly from those in hospital to control the study size
  
  if(return_full==F){
    dat<-as.data.frame(cbind(Y=Infec_COVID,V=V,C=C)[R,])
  } else{dat<-as.data.frame(cbind(Infec_COVID=Infec_COVID,Infec=Infec,H=H,W=W,V=V,C=C))}
  return(dat)
}



element <- function(TNDdf_train){
  # Data splitting
  s <- sample(1:length(TNDdf_train$Y), length(TNDdf_train$Y)/2)
  TNDdf_train1 <- TNDdf_train[s,]
  TNDdf_train2 <-  TNDdf_train[-s,]
  
  TNDdf_train_ctr1 <- subset(TNDdf_train1, Y==0)
  # training
  mod_g1_ctr <- fit_hal(
    X = select(TNDdf_train_ctr1, !c(V,Y)),
    Y = TNDdf_train_ctr1$V,
    family = "binomial"
  )
  
  TNDdf_train_ctr2 <- subset(TNDdf_train2, Y==0)
  # training
  mod_g2_ctr <- fit_hal(
    X = select(TNDdf_train_ctr2, !c(V,Y)),
    Y = TNDdf_train_ctr2$V,
    family = "binomial"
  )
  g1_cont <- TNDdf_train$V
  g1_cont[-s]<-predict(mod_g1_ctr,type="response",new_data=as.data.frame(cbind(C=TNDdf_train2$C,V=rep(1, nrow(TNDdf_train2)),Y=TNDdf_train2$Y)))
  g1_cont[s]<-predict(mod_g2_ctr,type="response",new_data=as.data.frame(cbind(C=TNDdf_train1$C,V=rep(1, nrow(TNDdf_train1)),Y=TNDdf_train1$Y)))
  
  
  # mu
  Out_mu1 <- fit_hal(X = select(TNDdf_train1, !Y),
                     Y = TNDdf_train1$Y,
                     family = "binomial"
  )
  Out_mu2 <- fit_hal(X = select(TNDdf_train2, !Y),
                     Y = TNDdf_train2$Y,
                     family = "binomial"
  )
  mu1 <- TNDdf_train$Y; mu0 <- TNDdf_train$Y;
  mu1[-s] <- predict(Out_mu1,new_data=as.data.frame(cbind(V=1,C = select(TNDdf_train2, !c(V,Y)) )),type="response")
  mu1[s] <- predict(Out_mu2,new_data=as.data.frame(cbind(V=1,C = select(TNDdf_train1, !c(V,Y)) )),type="response")               
  
  mu0[-s] <- predict(Out_mu1,new_data=as.data.frame(cbind(V=0,C = select(TNDdf_train2, !c(V,Y)) )),type="response")
  mu0[s] <- predict(Out_mu2,new_data=as.data.frame(cbind(V=0,C = select(TNDdf_train1, !c(V,Y)) )),type="response") 
  
  # m0
  Out_m1 <- fit_hal(X = select(TNDdf_train1, !c(V,Y)),
                    Y = TNDdf_train1$Y,
                    family = "binomial"
  )
  Out_m2 <- fit_hal(X = select(TNDdf_train2, !c(V,Y)),
                    Y = TNDdf_train2$Y,
                    family = "binomial"
  )
  m0 <- TNDdf_train$Y
  m0[-s] <- predict(Out_m1,new_data = select(TNDdf_train2, !c(V,Y)), type="response")
  m0[s] <- predict(Out_m2,new_data = select(TNDdf_train1, !c(V,Y)), type="response")
  
  return(list(mu1 = mu1, mu0 = mu0, m0 = m0, g1 =g1_cont, g0 = 1- g1_cont, w1 = m0/(1 - mu1), w0 = m0/(1 - mu0)))
}

######## Methods for VE
TNDdat = datagen(ssize=2000, em=1)
res <- element(TNDdat)
# IPW estimate and SE
mod_IPW <- mean(TNDdat$Y*TNDdat$V/res$g1)/mean(TNDdat$Y*(1-TNDdat$V)/res$g0)
mod_IPW
TNDdat$ipw <- ifelse(TNDdat$V == 1, 1/res$g1, 1/res$g0)
modY.ipw <- glm(Y ~ V, family=binomial(link = "log"), weights = ipw, data=TNDdat)
# if does not work try:
# modY.ipw <- glm(Y ~ V, family=binomial(), weights = ipw, data=TNDdat)
(est.ipw <- exp(modY.ipw$coefficients[2]))
se.ipw <- sqrt(vcovHC(modY.ipw)[2,2])
est.ipw; c(est.ipw *exp(- 1.96 * se.ipw ), est.ipw *exp( 1.96 * se.ipw ))

# proposed eif estimator
A1 <- (1 - TNDdat$Y)*(TNDdat$V - res$g1)/(res$g1* res$m0)
A0 <- (1 - TNDdat$Y)*((1-TNDdat$V) - res$g0)/(res$g0* res$m0)
psi1 <- mean(TNDdat$Y*TNDdat$V/res$g1 - res$w1* res$mu1*A1)
psi0 <- mean(TNDdat$Y*(1-TNDdat$V)/res$g0 - res$w0* res$mu0*A0)
(mod_eif <- psi1/psi0)
var1 <- mean((TNDdat$Y*TNDdat$V/res$g1 - res$w1* res$mu1*A1)^2)
var0 <- mean((TNDdat$Y*(1-TNDdat$V)/res$g0 - res$w0* res$mu0*A0)^2)
se1 <- sqrt(var1/(psi1^2) + var0/(psi0^2))
CI_l1 <- mod_eif *exp(- 1.96*se1/sqrt(nrow(TNDdat)))
CI_u1 <- mod_eif *exp(1.96*se1/sqrt(nrow(TNDdat)))
mod_eif; c(CI_l1, CI_u1)

# proposed eif estimator 2: SAME as the previous method, i.e.,eif
A.1 <- (1 - TNDdat$Y)*(TNDdat$V - res$g1)/(res$g1* (1 -res$mu1))
A.0 <- (1 - TNDdat$Y)*((1-TNDdat$V) - res$g0)/(res$g0* (1 - res$mu0))
psi.1 <- mean(TNDdat$Y*TNDdat$V/res$g1 - res$mu1*A.1)
psi.0 <- mean(TNDdat$Y*(1-TNDdat$V)/res$g0 - res$mu0*A.0)
(mod_eif2 <- psi.1/psi.0)
var.1 <- mean((TNDdat$Y*TNDdat$V/res$g1 - res$mu1*A.1)^2)
var.0 <- mean((TNDdat$Y*(1-TNDdat$V)/res$g0 - res$mu0*A.0)^2)
se2 <- sqrt(var.1/(psi.1^2) + var.0/(psi.0^2))
CI_l2 <- mod_eif2 *exp(- 1.96*se2/sqrt(nrow(TNDdat)))
CI_u2 <- mod_eif2 *exp( 1.96*se2/sqrt(nrow(TNDdat)))
mod_eif2; c(CI_l2, CI_u2)


# outcome regression
mod_OR <- mean(res$mu1 * res$w1)/mean(res$mu0 * res$w0)
mod_OR
nbs <- 50
bsest<-rep(NA,nbs)
for(i in 1:nbs){
  resamps<-sample(1:nrow(TNDdat),size=nrow(TNDdat),replace=T)
  datk<-TNDdat[resamps,]
  res <- element(datk)
  bsest[i] <- mean(res$mu1 * res$w1)/mean(res$mu0 * res$w0)
}
bs_var <- var(bsest)
CI = quantile(bsest,c(0.025,0.975))
mod_OR; CI


#####################################


mod_IPW <- function(TNDdat, res){
  TNDdat$ipw <- ifelse(TNDdat$V == 1, 1/res$g1, 1/res$g0)
  modY.ipw <- glm(Y ~ V, family=binomial(link = "logit"), weights = ipw, data=TNDdat)
  est.ipw <- exp(modY.ipw$coefficients[2])
  se.ipw <- sqrt(vcovHC(modY.ipw)[2,2])
  
  CI_l <- est.ipw *exp(- 1.96 * se.ipw )
  CI_u <- est.ipw *exp( 1.96 * se.ipw )
  return(list(est = est.ipw, CI =  c(CI_l2, CI_u2)))
}

mod_IPW(TNDdat, res)

mod_EIF2 <- function(TNDdat, res){
  # proposed eif estimator 2: SAME as the previous method, i.e.,eif
  A.1 <- (1 - TNDdat$Y)*(TNDdat$V - res$g1)/(res$g1* (1 -res$mu1))
  A.0 <- (1 - TNDdat$Y)*((1-TNDdat$V) - res$g0)/(res$g0* (1 - res$mu0))
  psi.1 <- mean(TNDdat$Y*TNDdat$V/res$g1 - res$mu1*A.1)
  psi.0 <- mean(TNDdat$Y*(1-TNDdat$V)/res$g0 - res$mu0*A.0)
  mod_eif2 <- psi.1/psi.0
  eifln <-  (TNDdat$Y*TNDdat$V/res$g1 - res$mu1*A.1)/psi.1 - (TNDdat$Y*(1-TNDdat$V)/res$g0 - res$mu0*A.0)/ psi.0
  varln <-  (mean(eifln^2) - (mean(eifln)^2))/nrow(TNDdat)
  mod_eif1 <- exp(mean(eifln))
  CI_l1 <- mod_eif1 *exp(- 1.96 * sqrt(varln) )
  CI_u1 <- mod_eif1 *exp( 1.96 * sqrt(varln) )
  
  CI_l2 <- mod_eif2 *exp(- 1.96 * sqrt(varln) )
  CI_u2 <- mod_eif2 *exp( 1.96 * sqrt(varln) )
  return(list( est1 = mod_eif1,CI1 =  c(CI_l1, CI_u1),  est2 = mod_eif2, CI2 =  c(CI_l2, CI_u2)))
}

mod_EIF2(TNDdat, res)

mod_OutReg<- function(TNDdat, res){
  mod_OR <- mean(res$mu1 * res$w1)/mean(res$mu0 * res$w0)
  return(list(est = mod_OR))
}

mod_OutReg(TNDdat, res)
for (i in 1:1000){
  TNDdat = datagen(ssize=2000, em=2)
  res <- element(TNDdat)
  #######################################################
  #IPW with controls to fit g
  est.1<-mod_IPW(TNDdat, res)
  est1<- est.1$est
  CI1<- est.1$CI
  #######################################################
  # Outcome regression with propensity ratio
  est2<-mod_OutReg(TNDdat, res)$est
  # Outcome regression with outcome ratio
  # est3<-mod_OutReg(TNDdat, deWet = "Out")$est
  #######################################################
  ## Method 3: The proposed estimator that is based on the EIF
  est.6 <- mod_EIF2(TNDdat, res)
  est3<- est.6$est1
  CI3<- est.6$CI1
  est3<- est.6$est2
  CI3<- est.6$CI2
  write(c(i,est1,CI1,est2,est3,CI3, est4,CI4),file="TNDStudy1hal2000_em2cross.txt",ncolumns=30,append=T)
}

res1<-read.table("/Users/congjiang/Downloads/TNDStudy1hal2000_em1cross.txt",header=F)
res1 <- na.omit(res1)
head(res1)
dim(res1)
colnames(res1)[c(1, 2, 5, 6,7)] <- c("i", "IPW", "out-Out", "EIF1", "EIF2")
summary(res1, na.rm = FALSE)
(s <- which(res1$IPW == Inf))
res1 <- res1[-s,]
mRR.em1 = 0.044
apply(res1, 2, mean) - mRR.em1
apply(res1, 2, median) - mRR.em1
apply(res1, 2, sd)


#CIs
psi = mRR.em1
mean(psi<=res1$V4 & psi>=res1$V3) #
mean(psi<=res1$V8 & psi>=res1$V7) #


res1<-read.table("/Users/congjiang/Downloads/TNDStudy1hal2000_em2cross.txt",header=F)
res1 <- na.omit(res1)
head(res1)
dim(res1)
colnames(res1)[c(1, 2, 5, 6)] <- c("i", "IPW", "out-Out", "EIF2")
summary(res1, na.rm = FALSE)
(s <- which(res1$IPW == Inf))
res1 <- res1[-s,]
mRR.em2 = 0.0715
apply(res1, 2, mean) - mRR.em2
apply(res1, 2, median) - mRR.em2
apply(res1, 2, sd)


#CIs
psi = mRR.em2
mean(psi<=res1$V4 & psi>=res1$V3) #
mean(psi<=res1$V8 & psi>=res1$V7) #


