element <- function(TNDdf_train){
  # Data splitting
  s <- sample(1:length(TNDdf_train$Y), length(TNDdf_train$Y)/2)
  TNDdf_train1 <- TNDdf_train[s,]
  TNDdf_train2 <-  TNDdf_train[-s,]
  
  TND_train_ctr1 <- subset(TNDdf_train1, Y==0)
  # training
  mod_g1_ctr <- fit_hal(
    X = select(TNDdf_train_ctr1, !c(V,Y)),
    Y = TNDdf_train_ctr1$V,
    family = "binomial"
  )
  
  TND_train_ctr2 <- subset(TNDdf_train2, Y==0)
  # training
  mod_g2_ctr <- fit_hal(
    X = select(TNDdf_train_ctr2, !c(V,Y)),
    Y = TNDdf_train_ctr2$V,
    family = "binomial"
  )
  g1_cont <- TNDdf_train$V
  g1_cont[-s]<-predict(mod_g1_ctr,type="response",new_data=as.data.frame(cbind(C=TNDdf_train2$C,V=rep(1, nrow(TNDdf_train2)),Y=TNDdf_train2$Y)))
  g1_cont[s]<-predict(mod_g2_ctr,type="response",new_data=as.data.frame(cbind(C=TNDdf_train1$C,V=rep(1, nrow(TNDdf_train1)),Y=TNDdf_train1$Y)))
  
  
  # mu
  Out_mu1 <- fit_hal(X = select(TNDdf_train1, !Y),
                    Y = TNDdf_train1$Y,
                    family = "binomial"
  )
  Out_mu2 <- fit_hal(X = select(TNDdf_train2, !Y),
                     Y = TNDdf_train2$Y,
                     family = "binomial"
  )
  mu1 <- TNDdf_train$Y; mu0 <- TNDdf_train$Y
  mu1[-s] <- predict(Out_mu1,new_data=as.data.frame(cbind(V=1,C = select(TNDdf_train2, !c(V,Y)) )),type="response")
  mu1[s] <- predict(Out_mu2,new_data=as.data.frame(cbind(V=1,C = select(TNDdf_train1, !c(V,Y)) )),type="response")               

  mu0[-s] <- predict(Out_mu1,new_data=as.data.frame(cbind(V=0,C = select(TNDdf_train2, !c(V,Y)) )),type="response")
  mu0[s] <- predict(Out_mu2,new_data=as.data.frame(cbind(V=0,C = select(TNDdf_train1, !c(V,Y)) )),type="response") 
  
  # m0
  Out_m1 <- fit_hal(X = select(TNDdf_train1, !c(V,Y)),
                   Y = TNDdf_train1$Y,
                   family = "binomial"
  )
  Out_m2 <- fit_hal(X = select(TNDdf_train2, !c(V,Y)),
                    Y = TNDdf_train2$Y,
                    family = "binomial"
  )
  m0 <- TNDdf_train$Y
  m0[-s] <- predict(Out_m1,new_data = select(TNDdf_train2, !c(V,Y)), type="response")
  m0[s] <- predict(Out_m2,new_data = select(TNDdf_train1, !c(V,Y)), type="response")
  
  return(list(mu1 = mu1, mu0 = mu0, m0 = m0, g1 =g1_cont, g0 = 1- g1_cont, w1 = m0/(1 - mu1), w0 = m0/(1 - mu0)))
}

######## Methods for VE
res <- element(TNDdat)
# IPW estimate and SE
mod_IPW <- mean(TNDdat$Y*TNDdat$V/res$g1)/mean(TNDdat$Y*(1-TNDdat$V)/res$g0)
mod_IPW
TNDdat$ipw <- ifelse(TNDdat$V == 1, 1/res$g1, 1/res$g0)
modY.ipw <- glm(Y ~ V, family=binomial(link = "log"), weights = ipw, data=TNDdat)
# if does not work try:
# modY.ipw <- glm(Y ~ V, family=binomial(), weights = ipw, data=TNDdat)
(est.ipw <- exp(modY.ipw$coefficients[2]))
se.ipw <- sqrt(vcovHC(modY.ipw)[2,2])
est.ipw; c(est.ipw - 1.96*se.ipw/sqrt(nrow(TNDdat)), est.ipw + 1.96*se.ipw/sqrt(nrow(TNDdat)))

# proposed eif estimator
A1 <- (1 - TNDdat$Y)*(TNDdat$V - res$g1)/(res$g1* res$m0)
A0 <- (1 - TNDdat$Y)*((1-TNDdat$V) - res$g0)/(res$g0* res$m0)
psi1 <- mean(TNDdat$Y*TNDdat$V/res$g1 - res$w1* res$mu1*A1)
psi0 <- mean(TNDdat$Y*(1-TNDdat$V)/res$g0 - res$w0* res$mu0*A0)
(mod_eif <- psi1/psi0)
var1 <- mean((TNDdat$Y*TNDdat$V/res$g1 - res$w1* res$mu1*A1)^2)
var0 <- mean((TNDdat$Y*(1-TNDdat$V)/res$g0 - res$w0* res$mu0*A0)^2)
se1 <- sqrt(var1/(psi1^2) + var0/(psi0^2))
CI_l1 <- mod_eif *exp(- 1.96*se1/sqrt(nrow(TNDdat)))
CI_u1 <- mod_eif *exp(1.96*se1/sqrt(nrow(TNDdat)))
mod_eif; c(CI_l1, CI_u1)

# proposed eif estimator 2: SAME as the previous method, i.e.,eif
A.1 <- (1 - TNDdat$Y)*(TNDdat$V - res$g1)/(res$g1* (1 -res$mu1))
A.0 <- (1 - TNDdat$Y)*((1-TNDdat$V) - res$g0)/(res$g0* (1 - res$mu0))
psi.1 <- mean(TNDdat$Y*TNDdat$V/res$g1 - res$mu1*A.1)
psi.0 <- mean(TNDdat$Y*(1-TNDdat$V)/res$g0 - res$mu0*A.0)
(mod_eif2 <- psi.1/psi.0)
var.1 <- mean((TNDdat$Y*TNDdat$V/res$g1 - res$mu1*A.1)^2)
var.0 <- mean((TNDdat$Y*(1-TNDdat$V)/res$g0 - res$mu0*A.0)^2)
se2 <- sqrt(var.1/(psi.1^2) + var.0/(psi.0^2))
CI_l2 <- mod_eif2 *exp(- 1.96*se2/sqrt(nrow(TNDdat)))
CI_u2 <- mod_eif2 *exp( 1.96*se2/sqrt(nrow(TNDdat)))
mod_eif2; c(CI_l2, CI_u2)


# outcome regression
mod_OR <- mean(res$mu1 * res$w1)/mean(res$mu0 * res$w0)
mod_OR
nbs <- 50
bsest<-rep(NA,nbs)
for(i in 1:nbs){
  resamps<-sample(1:nrow(TNDdat),size=nrow(TNDdat),replace=T)
  datk<-TNDdat[resamps,]
  res <- element(datk)
  bsest[i] <- mean(res$mu1 * res$w1)/mean(res$mu0 * res$w0)
}
bs_var <- var(bsest)
CI = quantile(bsest,c(0.025,0.975))
mod_OR; CI
